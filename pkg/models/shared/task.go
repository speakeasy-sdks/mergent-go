// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type TaskInput struct {
	// A duration string containing numbers and a unit suffix of "s" for seconds,
	// "m" for minutes, and "h" for hours. Examples: "5s"; "1.5h"; "2h45m"
	//
	// When both `delay` and `scheduled_for` are present, `delay` will be added
	// to `scheduled_for`.
	//
	Delay *string `json:"delay,omitempty"`
	// An optional name of the Task. This string must not contain more than 100
	// characters.
	//
	Name *string `json:"name,omitempty"`
	// The name of the of the Task queue. This string must not contain more than
	// 100 characters.
	//
	Queue   *string  `json:"queue,omitempty"`
	Request *Request `json:"request,omitempty"`
	// The [ISO 8601 timestamp](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)
	// for when the Task is scheduled to be executed. Example:
	// "2021-10-01T15:53:05Z".
	//
	// When not present, the Task will be scheduled for immediate execution.
	//
	ScheduledFor *time.Time `json:"scheduled_for,omitempty"`
}

// TaskStatusEnum - The status of this Task.
type TaskStatusEnum string

const (
	TaskStatusEnumQueued  TaskStatusEnum = "queued"
	TaskStatusEnumWorking TaskStatusEnum = "working"
	TaskStatusEnumSuccess TaskStatusEnum = "success"
	TaskStatusEnumFailure TaskStatusEnum = "failure"
)

func (e TaskStatusEnum) ToPointer() *TaskStatusEnum {
	return &e
}

func (e *TaskStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "queued":
		fallthrough
	case "working":
		fallthrough
	case "success":
		fallthrough
	case "failure":
		*e = TaskStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskStatusEnum: %s", s)
	}
}

// TaskOutput - Created
type TaskOutput struct {
	// The [ISO 8601 timestamp](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) representing when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A unique ID assigned upon creation.
	ID *string `json:"id,omitempty"`
	// An optional name of the Task. This string must not contain more than 100
	// characters.
	//
	Name *string `json:"name,omitempty"`
	// The name of the of the Task queue. This string must not contain more than
	// 100 characters.
	//
	Queue   *string  `json:"queue,omitempty"`
	Request *Request `json:"request,omitempty"`
	// The [ISO 8601 timestamp](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)
	// for when the Task is scheduled to be executed. Example:
	// "2021-10-01T15:53:05Z".
	//
	// When not present, the Task will be scheduled for immediate execution.
	//
	ScheduledFor *time.Time `json:"scheduled_for,omitempty"`
	// The status of this Task.
	Status *TaskStatusEnum `json:"status,omitempty"`
}
